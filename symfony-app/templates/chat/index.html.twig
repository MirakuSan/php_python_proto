<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>LLM Agent Chat Demo</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 1200px; margin: 0 auto; padding: 20px; }
        .chat-container { border: 1px solid #ccc; padding: 20px; margin-bottom: 20px; }
        .content-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 20px; }
        .messages { height: 300px; overflow-y: auto; border: 1px solid #eee; padding: 10px; margin-bottom: 10px; }
        .json-log { height: 300px; overflow-y: auto; overflow-x: hidden; border: 1px solid #ddd; padding: 10px; background-color: #f8f8f8; font-family: monospace; font-size: 12px; }
        .message { margin-bottom: 10px; padding: 8px; border-radius: 4px; }
        .user-message { background-color: #e3f2fd; border-left: 3px solid #2196f3; }
        .agent-message { background-color: #f3e5f5; border-left: 3px solid #9c27b0; }
        .system-message { background-color: #fff3e0; border-left: 3px solid #ff9800; }
        input, button { padding: 10px; margin: 5px; }
        input[type="text"] { width: 300px; }
        .hidden { display: none; }
        .section-title { font-weight: bold; margin-bottom: 10px; padding: 5px; background-color: #f0f0f0; }
        .json-entry { margin-bottom: 10px; padding: 8px; background-color: #fff; border: 1px solid #ddd; border-radius: 3px; }
        .json-type { font-weight: bold; color: #333; }
        .json-received { border-left: 3px solid #4caf50; }
        .json-sent { border-left: 3px solid #2196f3; }
    </style>
</head>
<body>
    <h1>LLM Agent Chat Demo</h1>

    <div class="chat-container">
        <div id="step1">
            <h3>Hello, what is your first name?</h3>
            <input type="text" id="firstName" placeholder="Enter your first name">
            <button onclick="submitName()">Submit</button>
        </div>

        <div id="step2" class="hidden">
            <h3>Welcome <span id="welcomeName"></span>!</h3>
            <p>You can now send messages to the LLM agent. Try words or phrases and see how the agent analyzes them!</p>

            <div class="content-grid">
                <div>
                    <div class="section-title">Chat Messages</div>
                    <div class="messages" id="messages"></div>
                    <input type="text" id="messageInput" placeholder="Enter a word or phrase">
                    <button onclick="sendMessage()">Send to Agent</button>
                </div>

                <div>
                    <div class="section-title">JSON-RPC Message Exchange</div>
                    <div class="json-log" id="jsonLog"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let firstName = '';

        function submitName() {
            firstName = document.getElementById('firstName').value.trim();
            if (!firstName) {
                alert('Please enter your first name');
                return;
            }

            document.getElementById('welcomeName').textContent = firstName;
            document.getElementById('step1').classList.add('hidden');
            document.getElementById('step2').classList.remove('hidden');

            addMessage('system', `Welcome ${firstName}! I am ready to analyze your messages.`);
        }

        function addMessage(type, content) {
            const messages = document.getElementById('messages');
            const div = document.createElement('div');
            div.className = `message ${type}-message`;
            div.textContent = content;
            messages.appendChild(div);
            messages.scrollTop = messages.scrollHeight;
        }

        function addJsonMessage(type, data) {
            const jsonLog = document.getElementById('jsonLog');
            const div = document.createElement('div');
            div.className = `json-entry json-${type}`;

            const typeSpan = document.createElement('div');
            typeSpan.className = 'json-type';
            typeSpan.textContent = type === 'received' ? 'ðŸ“¥ RECEIVED' : 'ðŸ“¤ SENT';

            const content = document.createElement('pre');
            content.textContent = JSON.stringify(data, null, 2);
            content.style.margin = '5px 0 0 0';
            content.style.fontSize = '11px';
            content.style.whiteSpace = 'pre-wrap';
            content.style.wordBreak = 'break-word';
            content.style.overflowWrap = 'break-word';

            div.appendChild(typeSpan);
            div.appendChild(content);
            jsonLog.appendChild(div);
            jsonLog.scrollTop = jsonLog.scrollHeight;
        }

        async function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const message = messageInput.value.trim();

            if (!message) {
                alert('Please enter a message');
                return;
            }

            addMessage('user', `You: ${message}`);
            messageInput.value = '';

            // Clear previous JSON log for new conversation
            document.getElementById('jsonLog').innerHTML = '';

            try {
                const response = await fetch('/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        firstName: firstName,
                        message: message
                    })
                });

                const data = await response.json();

                if (data.success) {
                    addMessage('agent', `Agent: ${data.response}`);

                    // Display JSON-RPC messages in the dedicated area
                    if (data.messages && data.messages.length > 0) {
                        data.messages.forEach(msg => {
                            addJsonMessage(msg.type, msg.data);
                        });
                    }
                } else {
                    addMessage('system', `Error: ${data.error}`);
                }
            } catch (error) {
                addMessage('system', `Error: ${error.message}`);
            }
        }

        document.getElementById('messageInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
    </script>
</body>
</html>